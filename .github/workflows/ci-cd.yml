# CI/CD Pipeline pour SCALAR Treasury Dashboard
# Tests automatisés, build Docker, déploiement

name: SCALAR CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18

jobs:
  
  # Job 1: Tests et Qualité Code
  test-and-quality:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: 🧹 Code Quality Checks
      run: |
        # Formatting check
        black --check --diff src/ tests/
        
        # Linting
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        
        # Type checking
        mypy src/treasury/ --ignore-missing-imports
        
    - name: 🧪 Run Unit Tests
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/test_models.py tests/test_pnl.py tests/test_risk.py \
               -v --cov=src/treasury --cov-report=xml --cov-report=html
               
    - name: 🔗 Integration Tests
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/test_ui_integration.py -v -m "not slow"
        
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📈 Generate Test Report
      if: always()
      run: |
        pytest tests/ --junitxml=test-results.xml --html=test-report.html
        
    - name: 📋 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          test-report.html
          htmlcov/

  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔒 Security Dependency Check
      run: |
        pip install safety bandit
        
        # Check for known vulnerabilities
        safety check --json || true
        
        # Static security analysis
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 📋 Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # Job 3: Build Docker Image
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🏗️ Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 4: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust memory-profiler
        
    - name: 🚀 Performance Load Tests
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        # Create performance test script
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import random
        
        class ScalarUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def view_dashboard(self):
                self.client.get("/")
                
            @task(1) 
            def health_check(self):
                self.client.get("/_stcore/health")
        EOF
        
        # Start Streamlit in background
        cd src && python -m streamlit run ui/app.py --server.port=8501 &
        STREAMLIT_PID=$!
        
        # Wait for startup
        sleep 10
        
        # Run load tests
        locust -f locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:8501 --html=load-test-report.html
        
        # Cleanup
        kill $STREAMLIT_PID || true
        
    - name: 📊 Memory Profiling
      run: |
        # Profile memory usage of core functions
        mprof run --python python -c "
        import sys; sys.path.insert(0, 'src')
        from treasury.pnl import compute_enhanced_pnl_vectorized
        from treasury.models import GenericDeal, ProductType, DepositLoan
        from treasury.config import PnLConfig
        from datetime import datetime
        
        deals = [GenericDeal(
            comment=f'Test {i}',
            product=ProductType.DEPOSIT,
            deal_id=f'TEST{i}',
            d_or_l=DepositLoan.DEPOSIT,
            pair_currency='USD',
            amount=1000000,
            trade_date=datetime(2025,1,1),
            value_date=datetime(2025,1,3),
            maturity_date=datetime(2025,12,31),
            client_rate=0.05,
            ois_equivalent_rate=0.048
        ) for i in range(1000)]
        
        result = compute_enhanced_pnl_vectorized(deals, PnLConfig())
        print(f'Processed {len(result)} deals')
        "
        
        mprof plot --output=memory-profile.png
        
    - name: 📋 Upload Performance Reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          load-test-report.html
          memory-profile.png
          mprofile_*.dat

  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-docker, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Deploy via SSH
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
          cd /opt/scalar
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:8501/_stcore/health || exit 1
        EOF
        
    - name: 🧪 Staging Smoke Tests
      run: |
        # Basic smoke tests against staging
        curl -f http://${{ secrets.STAGING_HOST }}/_stcore/health
        curl -f http://${{ secrets.STAGING_HOST }}/
        
  # Job 6: Deploy to Production  
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-docker, performance-tests]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build-docker.outputs.image-tag }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$PROD_KEY" > ~/.ssh/prod_key
        chmod 600 ~/.ssh/prod_key
        
        # Blue-Green deployment
        ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << EOF
          cd /opt/scalar
          
          # Pull new image
          docker pull $IMAGE_TAG
          
          # Blue-Green switch
          docker-compose -f docker-compose.prod.yml up -d --force-recreate
          
          # Health check
          sleep 45
          curl -f http://localhost/_stcore/health || exit 1
          
          # Cleanup old images
          docker image prune -f
        EOF
        
    - name: 📧 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "🚀 SCALAR ${{ github.event.release.tag_name }} deployed to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 7: Monitoring Setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    
    steps:
    - name: 📊 Setup Grafana Dashboards
      env:
        GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
        GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
      run: |
        # Import Grafana dashboard
        curl -X POST \
          -H "Authorization: Bearer $GRAFANA_TOKEN" \
          -H "Content-Type: application/json" \
          -d '@docker/grafana/dashboards/scalar-dashboard.json' \
          "$GRAFANA_URL/api/dashboards/db"
          
    - name: 🔔 Setup Alerting
      env:
        WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK }}
      run: |
        # Configure monitoring alerts
        echo "Monitoring and alerting configured for production deployment"
